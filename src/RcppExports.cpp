// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// permutations
NumericMatrix permutations(const NumericVector x, const int num_permutations);
RcppExport SEXP _waddR_permutations(SEXP xSEXP, SEXP num_permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type num_permutations(num_permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(permutations(x, num_permutations));
    return rcpp_result_gen;
END_RCPP
}
// squared_wass_decomp
Rcpp::List squared_wass_decomp(const NumericVector& x, const NumericVector& y, const double& p);
RcppExport SEXP _waddR_squared_wass_decomp(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(squared_wass_decomp(x, y, p));
    return rcpp_result_gen;
END_RCPP
}
// squared_wass_approx
double squared_wass_approx(const NumericVector& x, const NumericVector& y, const double& p);
RcppExport SEXP _waddR_squared_wass_approx(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(squared_wass_approx(x, y, p));
    return rcpp_result_gen;
END_RCPP
}
// wasserstein_metric
double wasserstein_metric(NumericVector x, NumericVector y, const double p, Nullable<NumericVector> wa_, Nullable<NumericVector> wb_);
RcppExport SEXP _waddR_wasserstein_metric(SEXP xSEXP, SEXP ySEXP, SEXP pSEXP, SEXP wa_SEXP, SEXP wb_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type wa_(wa_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type wb_(wb_SEXP);
    rcpp_result_gen = Rcpp::wrap(wasserstein_metric(x, y, p, wa_, wb_));
    return rcpp_result_gen;
END_RCPP
}
// add_test_export
NumericVector add_test_export(NumericVector& x_, NumericVector& y_);
RcppExport SEXP _waddR_add_test_export(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(add_test_export(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// add_test_export_sv
NumericVector add_test_export_sv(NumericVector& x_, double& summand_);
RcppExport SEXP _waddR_add_test_export_sv(SEXP x_SEXP, SEXP summand_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< double& >::type summand_(summand_SEXP);
    rcpp_result_gen = Rcpp::wrap(add_test_export_sv(x_, summand_));
    return rcpp_result_gen;
END_RCPP
}
// multiply_test_export
NumericVector multiply_test_export(NumericVector& x_, NumericVector& y_);
RcppExport SEXP _waddR_multiply_test_export(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_test_export(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// multiply_test_export_sv
NumericVector multiply_test_export_sv(NumericVector& x_, double& factor_);
RcppExport SEXP _waddR_multiply_test_export_sv(SEXP x_SEXP, SEXP factor_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< double& >::type factor_(factor_SEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_test_export_sv(x_, factor_));
    return rcpp_result_gen;
END_RCPP
}
// pow_test_export
NumericVector pow_test_export(NumericVector& x_, const double& exp);
RcppExport SEXP _waddR_pow_test_export(SEXP x_SEXP, SEXP expSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< const double& >::type exp(expSEXP);
    rcpp_result_gen = Rcpp::wrap(pow_test_export(x_, exp));
    return rcpp_result_gen;
END_RCPP
}
// abs_test_export
NumericVector abs_test_export(NumericVector& x_);
RcppExport SEXP _waddR_abs_test_export(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    rcpp_result_gen = Rcpp::wrap(abs_test_export(x_));
    return rcpp_result_gen;
END_RCPP
}
// sum_test_export
double sum_test_export(NumericVector& x_);
RcppExport SEXP _waddR_sum_test_export(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    rcpp_result_gen = Rcpp::wrap(sum_test_export(x_));
    return rcpp_result_gen;
END_RCPP
}
// subtract_test_export
NumericVector subtract_test_export(NumericVector& x_, NumericVector& y_);
RcppExport SEXP _waddR_subtract_test_export(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(subtract_test_export(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// divide_test_export_sv
NumericVector divide_test_export_sv(NumericVector& x_, double& y_);
RcppExport SEXP _waddR_divide_test_export_sv(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< double& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(divide_test_export_sv(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// divide_test_export_vectors
NumericVector divide_test_export_vectors(NumericVector& x_, NumericVector& y_);
RcppExport SEXP _waddR_divide_test_export_vectors(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(divide_test_export_vectors(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// mean_test_export
double mean_test_export(NumericVector& x_);
RcppExport SEXP _waddR_mean_test_export(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    rcpp_result_gen = Rcpp::wrap(mean_test_export(x_));
    return rcpp_result_gen;
END_RCPP
}
// sd_test_export
double sd_test_export(NumericVector& x_);
RcppExport SEXP _waddR_sd_test_export(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    rcpp_result_gen = Rcpp::wrap(sd_test_export(x_));
    return rcpp_result_gen;
END_RCPP
}
// cumSum_test_export
NumericVector cumSum_test_export(NumericVector& x_, int last_index);
RcppExport SEXP _waddR_cumSum_test_export(SEXP x_SEXP, SEXP last_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< int >::type last_index(last_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(cumSum_test_export(x_, last_index));
    return rcpp_result_gen;
END_RCPP
}
// cor_test_export
double cor_test_export(NumericVector x_, NumericVector y_);
RcppExport SEXP _waddR_cor_test_export(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(cor_test_export(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// rep_weighted_test_export
NumericVector rep_weighted_test_export(NumericVector& x_, NumericVector& weights_);
RcppExport SEXP _waddR_rep_weighted_test_export(SEXP x_SEXP, SEXP weights_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type weights_(weights_SEXP);
    rcpp_result_gen = Rcpp::wrap(rep_weighted_test_export(x_, weights_));
    return rcpp_result_gen;
END_RCPP
}
// concat_test_export
NumericVector concat_test_export(NumericVector& x_, NumericVector& y_);
RcppExport SEXP _waddR_concat_test_export(SEXP x_SEXP, SEXP y_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type y_(y_SEXP);
    rcpp_result_gen = Rcpp::wrap(concat_test_export(x_, y_));
    return rcpp_result_gen;
END_RCPP
}
// interval_table_test_export
IntegerVector interval_table_test_export(NumericVector& data_, NumericVector& breaks_, const int& default_freq);
RcppExport SEXP _waddR_interval_table_test_export(SEXP data_SEXP, SEXP breaks_SEXP, SEXP default_freqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type breaks_(breaks_SEXP);
    Rcpp::traits::input_parameter< const int& >::type default_freq(default_freqSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_table_test_export(data_, breaks_, default_freq));
    return rcpp_result_gen;
END_RCPP
}
// equidist_quantile_test_export
NumericVector equidist_quantile_test_export(NumericVector& x_, double K, double d, int type);
RcppExport SEXP _waddR_equidist_quantile_test_export(SEXP x_SEXP, SEXP KSEXP, SEXP dSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(equidist_quantile_test_export(x_, K, d, type));
    return rcpp_result_gen;
END_RCPP
}
// quantile_test_export
NumericVector quantile_test_export(NumericVector& x_, NumericVector& q_, int type);
RcppExport SEXP _waddR_quantile_test_export(SEXP x_SEXP, SEXP q_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile_test_export(x_, q_, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_waddR_permutations", (DL_FUNC) &_waddR_permutations, 2},
    {"_waddR_squared_wass_decomp", (DL_FUNC) &_waddR_squared_wass_decomp, 3},
    {"_waddR_squared_wass_approx", (DL_FUNC) &_waddR_squared_wass_approx, 3},
    {"_waddR_wasserstein_metric", (DL_FUNC) &_waddR_wasserstein_metric, 5},
    {"_waddR_add_test_export", (DL_FUNC) &_waddR_add_test_export, 2},
    {"_waddR_add_test_export_sv", (DL_FUNC) &_waddR_add_test_export_sv, 2},
    {"_waddR_multiply_test_export", (DL_FUNC) &_waddR_multiply_test_export, 2},
    {"_waddR_multiply_test_export_sv", (DL_FUNC) &_waddR_multiply_test_export_sv, 2},
    {"_waddR_pow_test_export", (DL_FUNC) &_waddR_pow_test_export, 2},
    {"_waddR_abs_test_export", (DL_FUNC) &_waddR_abs_test_export, 1},
    {"_waddR_sum_test_export", (DL_FUNC) &_waddR_sum_test_export, 1},
    {"_waddR_subtract_test_export", (DL_FUNC) &_waddR_subtract_test_export, 2},
    {"_waddR_divide_test_export_sv", (DL_FUNC) &_waddR_divide_test_export_sv, 2},
    {"_waddR_divide_test_export_vectors", (DL_FUNC) &_waddR_divide_test_export_vectors, 2},
    {"_waddR_mean_test_export", (DL_FUNC) &_waddR_mean_test_export, 1},
    {"_waddR_sd_test_export", (DL_FUNC) &_waddR_sd_test_export, 1},
    {"_waddR_cumSum_test_export", (DL_FUNC) &_waddR_cumSum_test_export, 2},
    {"_waddR_cor_test_export", (DL_FUNC) &_waddR_cor_test_export, 2},
    {"_waddR_rep_weighted_test_export", (DL_FUNC) &_waddR_rep_weighted_test_export, 2},
    {"_waddR_concat_test_export", (DL_FUNC) &_waddR_concat_test_export, 2},
    {"_waddR_interval_table_test_export", (DL_FUNC) &_waddR_interval_table_test_export, 3},
    {"_waddR_equidist_quantile_test_export", (DL_FUNC) &_waddR_equidist_quantile_test_export, 4},
    {"_waddR_quantile_test_export", (DL_FUNC) &_waddR_quantile_test_export, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_waddR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
